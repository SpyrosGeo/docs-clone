{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport logger from './logger';\nlet debug = logger('quill:events');\nconst EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];\nEVENTS.forEach(function (eventName) {\n  document.addEventListener(eventName, (...args) => {\n    [].slice.call(document.querySelectorAll('.ql-container')).forEach(node => {\n      // TODO use WeakMap\n      if (node.__quill && node.__quill.emitter) {\n        node.__quill.emitter.handleDOM(...args);\n      }\n    });\n  });\n});\n\nclass Emitter extends EventEmitter {\n  constructor() {\n    super();\n    this.listeners = {};\n    this.on('error', debug.error);\n  }\n\n  emit() {\n    debug.log.apply(debug, arguments);\n    super.emit.apply(this, arguments);\n  }\n\n  handleDOM(event, ...args) {\n    (this.listeners[event.type] || []).forEach(function ({\n      node,\n      handler\n    }) {\n      if (event.target === node || node.contains(event.target)) {\n        handler(event, ...args);\n      }\n    });\n  }\n\n  listenDOM(eventName, node, handler) {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.listeners[eventName].push({\n      node,\n      handler\n    });\n  }\n\n}\n\nEmitter.events = {\n  EDITOR_CHANGE: 'editor-change',\n  SCROLL_BEFORE_UPDATE: 'scroll-before-update',\n  SCROLL_OPTIMIZE: 'scroll-optimize',\n  SCROLL_UPDATE: 'scroll-update',\n  SELECTION_CHANGE: 'selection-change',\n  TEXT_CHANGE: 'text-change'\n};\nEmitter.sources = {\n  API: 'api',\n  SILENT: 'silent',\n  USER: 'user'\n};\nexport default Emitter;","map":{"version":3,"sources":["/home/thatguy/My-repos/Javascript/React/docs-clone/client/node_modules/quill/core/emitter.js"],"names":["EventEmitter","logger","debug","EVENTS","forEach","eventName","document","addEventListener","args","slice","call","querySelectorAll","node","__quill","emitter","handleDOM","Emitter","constructor","listeners","on","error","emit","log","apply","arguments","event","type","handler","target","contains","listenDOM","push","events","EDITOR_CHANGE","SCROLL_BEFORE_UPDATE","SCROLL_OPTIMIZE","SCROLL_UPDATE","SELECTION_CHANGE","TEXT_CHANGE","sources","API","SILENT","USER"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAIC,KAAK,GAAGD,MAAM,CAAC,cAAD,CAAlB;AAEA,MAAME,MAAM,GAAG,CAAC,iBAAD,EAAoB,WAApB,EAAiC,SAAjC,EAA4C,OAA5C,CAAf;AAEAA,MAAM,CAACC,OAAP,CAAe,UAASC,SAAT,EAAoB;AACjCC,EAAAA,QAAQ,CAACC,gBAAT,CAA0BF,SAA1B,EAAqC,CAAC,GAAGG,IAAJ,KAAa;AAChD,OAAGC,KAAH,CAASC,IAAT,CAAcJ,QAAQ,CAACK,gBAAT,CAA0B,eAA1B,CAAd,EAA0DP,OAA1D,CAAmEQ,IAAD,IAAU;AAC1E;AACA,UAAIA,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAaC,OAAjC,EAA0C;AACxCF,QAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAqBC,SAArB,CAA+B,GAAGP,IAAlC;AACD;AACF,KALD;AAMD,GAPD;AAQD,CATD;;AAYA,MAAMQ,OAAN,SAAsBhB,YAAtB,CAAmC;AACjCiB,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,EAAL,CAAQ,OAAR,EAAiBjB,KAAK,CAACkB,KAAvB;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACLnB,IAAAA,KAAK,CAACoB,GAAN,CAAUC,KAAV,CAAgBrB,KAAhB,EAAuBsB,SAAvB;AACA,UAAMH,IAAN,CAAWE,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB;AACD;;AAEDT,EAAAA,SAAS,CAACU,KAAD,EAAQ,GAAGjB,IAAX,EAAiB;AACxB,KAAC,KAAKU,SAAL,CAAeO,KAAK,CAACC,IAArB,KAA8B,EAA/B,EAAmCtB,OAAnC,CAA2C,UAAS;AAAEQ,MAAAA,IAAF;AAAQe,MAAAA;AAAR,KAAT,EAA4B;AACrE,UAAIF,KAAK,CAACG,MAAN,KAAiBhB,IAAjB,IAAyBA,IAAI,CAACiB,QAAL,CAAcJ,KAAK,CAACG,MAApB,CAA7B,EAA0D;AACxDD,QAAAA,OAAO,CAACF,KAAD,EAAQ,GAAGjB,IAAX,CAAP;AACD;AACF,KAJD;AAKD;;AAEDsB,EAAAA,SAAS,CAACzB,SAAD,EAAYO,IAAZ,EAAkBe,OAAlB,EAA2B;AAClC,QAAI,CAAC,KAAKT,SAAL,CAAeb,SAAf,CAAL,EAAgC;AAC9B,WAAKa,SAAL,CAAeb,SAAf,IAA4B,EAA5B;AACD;;AACD,SAAKa,SAAL,CAAeb,SAAf,EAA0B0B,IAA1B,CAA+B;AAAEnB,MAAAA,IAAF;AAAQe,MAAAA;AAAR,KAA/B;AACD;;AAzBgC;;AA4BnCX,OAAO,CAACgB,MAAR,GAAiB;AACfC,EAAAA,aAAa,EAAU,eADR;AAEfC,EAAAA,oBAAoB,EAAG,sBAFR;AAGfC,EAAAA,eAAe,EAAQ,iBAHR;AAIfC,EAAAA,aAAa,EAAU,eAJR;AAKfC,EAAAA,gBAAgB,EAAO,kBALR;AAMfC,EAAAA,WAAW,EAAY;AANR,CAAjB;AAQAtB,OAAO,CAACuB,OAAR,GAAkB;AAChBC,EAAAA,GAAG,EAAM,KADO;AAEhBC,EAAAA,MAAM,EAAG,QAFO;AAGhBC,EAAAA,IAAI,EAAK;AAHO,CAAlB;AAOA,eAAe1B,OAAf","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport logger from './logger';\n\nlet debug = logger('quill:events');\n\nconst EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];\n\nEVENTS.forEach(function(eventName) {\n  document.addEventListener(eventName, (...args) => {\n    [].slice.call(document.querySelectorAll('.ql-container')).forEach((node) => {\n      // TODO use WeakMap\n      if (node.__quill && node.__quill.emitter) {\n        node.__quill.emitter.handleDOM(...args);\n      }\n    });\n  });\n});\n\n\nclass Emitter extends EventEmitter {\n  constructor() {\n    super();\n    this.listeners = {};\n    this.on('error', debug.error);\n  }\n\n  emit() {\n    debug.log.apply(debug, arguments);\n    super.emit.apply(this, arguments);\n  }\n\n  handleDOM(event, ...args) {\n    (this.listeners[event.type] || []).forEach(function({ node, handler }) {\n      if (event.target === node || node.contains(event.target)) {\n        handler(event, ...args);\n      }\n    });\n  }\n\n  listenDOM(eventName, node, handler) {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n    this.listeners[eventName].push({ node, handler })\n  }\n}\n\nEmitter.events = {\n  EDITOR_CHANGE        : 'editor-change',\n  SCROLL_BEFORE_UPDATE : 'scroll-before-update',\n  SCROLL_OPTIMIZE      : 'scroll-optimize',\n  SCROLL_UPDATE        : 'scroll-update',\n  SELECTION_CHANGE     : 'selection-change',\n  TEXT_CHANGE          : 'text-change'\n};\nEmitter.sources = {\n  API    : 'api',\n  SILENT : 'silent',\n  USER   : 'user'\n};\n\n\nexport default Emitter;\n"]},"metadata":{},"sourceType":"module"}