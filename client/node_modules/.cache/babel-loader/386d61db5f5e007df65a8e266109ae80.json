{"ast":null,"code":"import Text from './text';\nimport Parchment from 'parchment';\n\nclass Inline extends Parchment.Inline {\n  static compare(self, other) {\n    let selfIndex = Inline.order.indexOf(self);\n    let otherIndex = Inline.order.indexOf(other);\n\n    if (selfIndex >= 0 || otherIndex >= 0) {\n      return selfIndex - otherIndex;\n    } else if (self === other) {\n      return 0;\n    } else if (self < other) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n  formatAt(index, length, name, value) {\n    if (Inline.compare(this.statics.blotName, name) < 0 && Parchment.query(name, Parchment.Scope.BLOT)) {\n      let blot = this.isolate(index, length);\n\n      if (value) {\n        blot.wrap(name, value);\n      }\n    } else {\n      super.formatAt(index, length, name, value);\n    }\n  }\n\n  optimize(context) {\n    super.optimize(context);\n\n    if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n      let parent = this.parent.isolate(this.offset(), this.length());\n      this.moveChildren(parent);\n      parent.wrap(this);\n    }\n  }\n\n}\n\nInline.allowedChildren = [Inline, Parchment.Embed, Text]; // Lower index means deeper in the DOM tree, since not found (-1) is for embeds\n\nInline.order = ['cursor', 'inline', // Must be lower\n'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher\n];\nexport default Inline;","map":{"version":3,"sources":["/home/thatguy/My-repos/Javascript/React/docs-clone/client/node_modules/quill/blots/inline.js"],"names":["Text","Parchment","Inline","compare","self","other","selfIndex","order","indexOf","otherIndex","formatAt","index","length","name","value","statics","blotName","query","Scope","BLOT","blot","isolate","wrap","optimize","context","parent","offset","moveChildren","allowedChildren","Embed"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAGA,MAAMC,MAAN,SAAqBD,SAAS,CAACC,MAA/B,CAAsC;AACtB,SAAPC,OAAO,CAACC,IAAD,EAAOC,KAAP,EAAc;AAC1B,QAAIC,SAAS,GAAGJ,MAAM,CAACK,KAAP,CAAaC,OAAb,CAAqBJ,IAArB,CAAhB;AACA,QAAIK,UAAU,GAAGP,MAAM,CAACK,KAAP,CAAaC,OAAb,CAAqBH,KAArB,CAAjB;;AACA,QAAIC,SAAS,IAAI,CAAb,IAAkBG,UAAU,IAAI,CAApC,EAAuC;AACrC,aAAOH,SAAS,GAAGG,UAAnB;AACD,KAFD,MAEO,IAAIL,IAAI,KAAKC,KAAb,EAAoB;AACzB,aAAO,CAAP;AACD,KAFM,MAEA,IAAID,IAAI,GAAGC,KAAX,EAAkB;AACvB,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF;;AAEDK,EAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AACnC,QAAIZ,MAAM,CAACC,OAAP,CAAe,KAAKY,OAAL,CAAaC,QAA5B,EAAsCH,IAAtC,IAA8C,CAA9C,IAAmDZ,SAAS,CAACgB,KAAV,CAAgBJ,IAAhB,EAAsBZ,SAAS,CAACiB,KAAV,CAAgBC,IAAtC,CAAvD,EAAoG;AAClG,UAAIC,IAAI,GAAG,KAAKC,OAAL,CAAaV,KAAb,EAAoBC,MAApB,CAAX;;AACA,UAAIE,KAAJ,EAAW;AACTM,QAAAA,IAAI,CAACE,IAAL,CAAUT,IAAV,EAAgBC,KAAhB;AACD;AACF,KALD,MAKO;AACL,YAAMJ,QAAN,CAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,KAApC;AACD;AACF;;AAEDS,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,UAAMD,QAAN,CAAeC,OAAf;;AACA,QAAI,KAAKC,MAAL,YAAuBvB,MAAvB,IACAA,MAAM,CAACC,OAAP,CAAe,KAAKY,OAAL,CAAaC,QAA5B,EAAsC,KAAKS,MAAL,CAAYV,OAAZ,CAAoBC,QAA1D,IAAsE,CAD1E,EAC6E;AAC3E,UAAIS,MAAM,GAAG,KAAKA,MAAL,CAAYJ,OAAZ,CAAoB,KAAKK,MAAL,EAApB,EAAmC,KAAKd,MAAL,EAAnC,CAAb;AACA,WAAKe,YAAL,CAAkBF,MAAlB;AACAA,MAAAA,MAAM,CAACH,IAAP,CAAY,IAAZ;AACD;AACF;;AAlCmC;;AAoCtCpB,MAAM,CAAC0B,eAAP,GAAyB,CAAC1B,MAAD,EAASD,SAAS,CAAC4B,KAAnB,EAA0B7B,IAA1B,CAAzB,C,CACA;;AACAE,MAAM,CAACK,KAAP,GAAe,CACb,QADa,EACH,QADG,EACS;AACtB,WAFa,EAEA,QAFA,EAEU,QAFV,EAEoB,MAFpB,EAE4B,QAF5B,EAGb,MAHa,EAGL,MAHK,CAGS;AAHT,CAAf;AAOA,eAAeL,MAAf","sourcesContent":["import Text from './text';\nimport Parchment from 'parchment';\n\n\nclass Inline extends Parchment.Inline {\n  static compare(self, other) {\n    let selfIndex = Inline.order.indexOf(self);\n    let otherIndex = Inline.order.indexOf(other);\n    if (selfIndex >= 0 || otherIndex >= 0) {\n      return selfIndex - otherIndex;\n    } else if (self === other) {\n      return 0;\n    } else if (self < other) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n  formatAt(index, length, name, value) {\n    if (Inline.compare(this.statics.blotName, name) < 0 && Parchment.query(name, Parchment.Scope.BLOT)) {\n      let blot = this.isolate(index, length);\n      if (value) {\n        blot.wrap(name, value);\n      }\n    } else {\n      super.formatAt(index, length, name, value);\n    }\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    if (this.parent instanceof Inline &&\n        Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n      let parent = this.parent.isolate(this.offset(), this.length());\n      this.moveChildren(parent);\n      parent.wrap(this);\n    }\n  }\n}\nInline.allowedChildren = [Inline, Parchment.Embed, Text];\n// Lower index means deeper in the DOM tree, since not found (-1) is for embeds\nInline.order = [\n  'cursor', 'inline',   // Must be lower\n  'underline', 'strike', 'italic', 'bold', 'script',\n  'link', 'code'        // Must be higher\n];\n\n\nexport default Inline;\n"]},"metadata":{},"sourceType":"module"}